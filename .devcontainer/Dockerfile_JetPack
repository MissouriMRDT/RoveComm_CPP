# Image Variables
ARG L4T_MAJOR="36"
ARG L4T_MINOR="2"
ARG L4T_PATCH="0"
ARG L4T_BASE="l4t-jetpack"

# Base Image
FROM nvcr.io/nvidia/${L4T_BASE}:r${L4T_MAJOR}.${L4T_MINOR}.${L4T_PATCH}

# Install Variables
ARG L4T_MAJOR="36"
ARG L4T_MINOR="2"
ARG L4T_PATCH="0"
ARG L4T_BASE="l4t-jetpack"

# Set Non-Interactive Mode
ARG DEBIAN_FRONTEND=noninteractive

# Set Timezone
ARG TZ="America/Chicago"
RUN echo "${TZ}" > /etc/localtime && \
    echo "${TZ}" > /etc/timezone

# Set L4T Version
RUN echo "# R${L4T_MAJOR} (release), REVISION: ${L4T_MINOR}.${L4T_PATCH}" > /etc/nv_tegra_release

# Install Required Ubuntu Packages
RUN apt-get update && apt-get install --no-install-recommends -y \
    build-essential gfortran cmake git gdb file tar libatlas-base-dev apt-transport-https  \
    libavcodec-dev libavformat-dev libswresample-dev libcanberra-gtk3-module zstd wget less \
    libdc1394-dev libeigen3-dev libglew-dev libgstreamer-plugins-base1.0-dev udev curl \
    libgstreamer-plugins-good1.0-dev libgstreamer1.0-dev libgtk-3-dev libjpeg-dev sudo \
    libjpeg8-dev libjpeg-turbo8-dev liblapack-dev liblapacke-dev libopenblas-dev libpng-dev \
    libpostproc-dev libswscale-dev libtbb-dev libtbb2 libtesseract-dev libtiff-dev libv4l-dev \
    libxine2-dev libxvidcore-dev libx264-dev libgtkglext1 libgtkglext1-dev pkg-config qv4l2 \
    v4l-utils zlib1g-dev python3-dev python3-numpy libboost-all-dev valgrind doxygen graphviz nano mingw-w64

#This symbolic link is needed to use the streaming features on Jetson inside a container
RUN ln -sf /usr/lib/aarch64-linux-gnu/tegra/libv4l2.so.0 /usr/lib/aarch64-linux-gnu/libv4l2.so

# Install gcc/g++
RUN apt-get install  --no-install-recommends -y \
    gcc-10 g++-10 && \
    rm -rf /var/lib/apt/lists/* && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10

# Install CMake
ARG CMAKE_VERSION="3.30.2"
COPY install-cmake.sh /tmp/
RUN if [ "${CMAKE_VERSION}" != "none" ]; then \
    chmod +x /tmp/install-cmake.sh && /tmp/install-cmake.sh ${CMAKE_VERSION}; \
    fi && \
    rm -f /tmp/install-cmake.sh

# Set Working Directory
WORKDIR /opt

# Install Google Test
ARG GTEST_VERSION="1.15.2"
RUN wget -q https://github.com/MissouriMRDT/Autonomy_Packages/raw/main/gtest/arm64/gtest_${GTEST_VERSION}_arm64.deb && \
    dpkg -i gtest_${GTEST_VERSION}_arm64.deb && \
    rm gtest_${GTEST_VERSION}_arm64.deb

# Enable Make Threads
RUN echo 'export MAKEFLAGS=-j$(($(grep -c "^processor" /proc/cpuinfo) - 1))' >> .bashrc

# Clone RoveComm CPP Repository
RUN git clone --recurse-submodules -j8 https://github.com/MissouriMRDT/RoveComm_CPP.git /opt/RoveComm_CPP

# Set Working Directory
WORKDIR /opt/RoveComm_CPP/

# Set Labels
LABEL authors="Missouri S&T Mars Rover Design Team"
LABEL maintainer="Mars Rover Design Team <marsrover@mst.edu>"
LABEL org.opencontainers.image.source=https://github.com/missourimrdt/rovecomm_cpp
LABEL org.opencontainers.image.licenses=GPL-3.0-only
LABEL org.opencontainers.image.version="v24.2.5"
LABEL org.opencontainers.image.description="Docker Image for ${L4T_BASE} ${L4T_MAJOR}.${L4T_MINOR}.${L4T_PATCH}, and Google Test v${GTEST_VERSION}."
